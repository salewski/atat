#!@BASH_SH@ -
# SPDX-License-Identifier: GPL-2.0-or-later
#
# @configure_input@
#
# Copyright (c) 2020 Alan D. Salewski <salewski@att.net>

# atat: Pretty-print the output of 'at -l' to show at(1) jobs in the order in
# which they will occur, and with the date and time fields formatted in a way
# that is more easily consumed by downstream tools in a *nix pipeline.
#

readonly PROG='atat'

# Comma-space-separated list
readonly COPYRIGHT_DATES='2020'

readonly gl_maintainer_addr='@DFLT_MAINTAINER@'  # filtered in at build time

# This variable is replaced by the current atat project version
# number at build time.
readonly ATAT_VERSION='@VERSION@'

# This variable is replaced at build time
readonly gl_const_build_date='@BUILD_DATE@'
readonly gl_const_release="${ATAT_VERSION}  (built: ${gl_const_build_date})"


# By default we'll use the external programs found at configure-time (values
# are filtered-in here at build time). But we allow the user to override any
# particular tool by setting an environment variable named after the tool
# (with hyphen chars changed to underscores).

AT_PROG="${AT:-@AT@}"
CAT_PROG="${CAT:-@CAT@}"
XARGS_PROG="${XARGS:-@XARGS@}"

# CAREFUL: The POSIX(ish) shell found at configure time (based (conditionally)
#          on autoconf's CONFIG_SHELL) gets set to configure- and build-time
#          variables named 'SHELL'. At runtime, however, a variable by that
#          name is used by various programs (e.g., GNU screen) for other
#          purposes; if that variable is set, it is very likely not the same
#          value found at configure time. Furthermore, we would not want to
#          try to hijack it for our purposes here. Instead, we're using the
#          name 'SH' as the user-settable runtime variable to be overridden
#          (if needed), and from the user's perspective that name is (mainly)
#          consistent with what we do for other programs, as well (use the
#          basename of the program, uppercased).
SH_PROG="${SH:-@SHELL@}"


f_print_help () {

# FIXME: --help not yet supported
# FIXME: --verion not yet supported
# FIXME: --verbose not yet supported
# FIXME: -- not yet supported
    "${CAT_PROG}" <<EOF
usage: $PROG [OPTION...]
       $PROG [-h|--help]
       $PROG [-v|--version]
Sort and pretty-print the output of 'at -l'

  -h, --help      Print this help message on stdout
  -V, --version   Print the version of the program on stdout
  -v, --verbose   Tell what is being done. Two or more -v options turns on tracing (set -x)

      --          Signals the end of options and disables further options processing. All
                    remaining arguments will be ignored

Report bugs to ${gl_maintainer_addr}
EOF
}

f_print_version () {
    "${CAT_PROG}" <<EOF
${PROG} ${gl_const_release}
Copyright (C) ${COPYRIGHT_DATES} Alan D. Salewski
License GPLv2+: GNU GPL version 2 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Alan D. Salewski.
EOF
}


# By default the output of 'at -l' (a.k.a. atq(1)) is sorted by neither the
# 'at' job number nor the date/time at which the job will be executed:
#
#     $ at -l | head
#     39      Wed Jun 24 03:00:00 2020 a ads
#     37      Sun Dec 20 03:00:00 2020 a ads
#     49      Thu Sep 24 03:00:00 2020 a ads
#     46      Sun Jul 25 03:00:00 2021 a ads
#     36      Thu Jun 24 03:00:00 2021 a ads
#     42      Wed Aug 25 03:00:00 2021 a ads
#     38      Tue May 25 03:00:00 2021 a ads
#     50      Mon Jan 25 03:00:00 2021 a ads
#
#
# We'll consume the 'at -l' format and sort it by date/time, and then by job
# number. We'll leverage the date(1) command to reformat the (potentially
# localized?) POSIX date/time info into something closer to an RFC 3339
# ("closer" because we don't emit the 'time-offset' required by section 5.6 of
# RFC 3339). The reformatted date/time field sorts naturally in ascending
# order (a fact we also leverage), but is also more easily used by downstream
# tools that may wish to sort the output in different ways (e.g., by queue,
# then by user, then by date).
#
# XXX: Future versions of the program might want to provde a number of
#      '--by-FOO' command line options (where FOO is one of 'datetime',
#      'job-number', 'queue-name', or 'user-name') to allow the user to alter
#      our baked-in sort order.
#
#     $ at -l | xargs -r -L 1 sh -c 'echo $1 $(date --date "$2, $4 $3 $6 $5" "+%F %T") $7 $8' atat
#     39 2020-06-24 03:00:00 a ads
#     37 2020-12-20 03:00:00 a ads
#     49 2020-09-24 03:00:00 a ads
#     46 2021-07-25 03:00:00 a ads
#     36 2021-06-24 03:00:00 a ads
#     42 2021-08-25 03:00:00 a ads
#     38 2021-05-25 03:00:00 a ads
#     50 2021-01-25 03:00:00 a ads
#     45 2020-10-25 03:00:00 a ads
#     44 2021-04-24 03:00:00 a ads
#     48 2020-04-24 03:00:00 a ads
#     47 2020-05-25 03:00:00 a ads
#     52 2021-03-25 03:00:00 a ads
#     43 2020-11-24 03:00:00 a ads
#     41 2020-07-25 03:00:00 a ads
#     40 2021-02-22 03:00:00 a ads
#     51 2020-08-25 03:00:00 a ads

# Note that we pass the ${PROG} name to the shell merely so it will be used to
# set $0. That allows us to avoid needing to "subtract one" with our field
# numbers.
"${AT_PROG}" -l \
| "${XARGS_PROG}" -r -L 1 "${SH_PROG}" -c 'echo $1 $(date --date "$2, $4 $3 $6 $5" "+%F %T") $7 $8' atat
