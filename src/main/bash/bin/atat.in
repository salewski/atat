#!@BASH_SH@ -
# SPDX-License-Identifier: GPL-2.0-or-later
#
# @configure_input@
#
# Copyright (c) 2020 Alan D. Salewski <salewski@att.net>

# atat: Pretty-print the output of 'at -l' to show at(1) jobs in the order in
# which they will occur, and with the date and time fields formatted in a way
# that is more easily consumed by downstream tools in a *nix pipeline.
#

declare -r PROG='atat'

set -o pipefail

declare -r MAINTAINER='@DFLT_MAINTAINER@'  # filtered-in at build time

# This variable is replaced by the current project version number at build
# time.
declare -r VERSION='@VERSION@'

# Comma-space-separated list
declare -r COPYRIGHT_DATES='2020'

# This variable is replaced at build time
declare -r gl_const_build_date='@BUILD_DATE@'
declare -r gl_const_release="${VERSION}  (built: ${gl_const_build_date})"


# By default we'll use the external programs found at configure-time (values
# are filtered-in here at build time). But we allow the user to override any
# particular tool by setting an environment variable named after the tool
# (with hyphen chars changed to underscores).

AT_PROG="${AT:-@AT@}"
CAT_PROG="${CAT:-@CAT@}"
XARGS_PROG="${XARGS:-@XARGS@}"

# CAREFUL: The POSIX(ish) shell found at configure time (based (conditionally)
#          on autoconf's CONFIG_SHELL) gets set to configure- and build-time
#          variables named 'SHELL'. At runtime, however, a variable by that
#          name is used by various programs (e.g., GNU screen) for other
#          purposes; if that variable is set, it is very likely not the same
#          value found at configure time. Furthermore, we would not want to
#          try to hijack it for our purposes here. Instead, we're using the
#          name 'SH' as the user-settable runtime variable to be overridden
#          (if needed), and from the user's perspective that name is (mainly)
#          consistent with what we do for other programs, as well (use the
#          basename of the program, uppercased).
SH_PROG="${SH:-@SHELL@}"

# Note that we use an "application" $TRACING flag separate from bash's
# built-in 'xtrace' (set -x) shell option. This allows us to have a general
# notion of user-requested verbosity separate from any selectively placed
# 'set -x/set +x' sections we may plug into the code while working on the
# program itself; similarly for places where we might want to avoid trace
# output while debugging by selectively placing 'set +x/set -x' sections; both
# of those behaviors would be much more cumbersome to achieve if we just
# checked for 'x' in $- at runtime.
#
BE_VERBOSE=false   # enable with one '-v' (--verbose) opt
DEBUGGING=false    # enable with two '-v' (--verbose) opts
TRACING=false      # enable with three or more '-v' (--verbose) opts


# Note that we export the cleanup hook function definitions, but not the
# ${F_CLEANUP_HOOK_NAMES} array. We'll create a separate copy of that in any
# subshell that needs to register its own cleanup hooks.
#
declare -a F_CLEANUP_HOOK_NAMES=()

function f_add_cleanup_hook_name () {

    : $PROG \(trace: $LINENO\): ${FUNCNAME}\(\): entered

    F_CLEANUP_HOOK_NAMES+=( $1 );
}
export -f f_add_cleanup_hook_name


function f_cleanup () {

    : $PROG \(trace: $LINENO\): ${FUNCNAME}\(\): entered

    if test ${#F_CLEANUP_HOOK_NAMES[@]} -eq 0; then
        : $PROG \(trace: $LINENO\): ${FUNCNAME}\(\): No cleanup hooks, so nothing to do
        return
    fi

    local __t_cleanup_hook
    local __t_idx

    let __t_idx=${#F_CLEANUP_HOOK_NAMES[@]}-1

    # Note that we're running the cleanup hooks in opposite order from which
    # they were installed.
    #
    while test ${__t_idx} -ge 0; do

        __t_cleanup_hook=${F_CLEANUP_HOOK_NAMES[${__t_idx}]}

        if $DEBUGGING; then
            printf "${PROG} (info): running cleanup hook: [%s]\n" "${__t_cleanup_hook}" 1>&2
        fi

        test -n "${__t_cleanup_hook}" && eval "${__t_cleanup_hook}"

        let __t_idx=${__t_idx}-1
    done
}
export -f f_cleanup

function f_cleanup_and_die () {
    : $PROG \(trace: $LINENO\): ${FUNCNAME}\(\): entered
    f_cleanup
    exit 1
}
export -f f_cleanup_and_die

trap 'printf "$PROG (warn): HUP signal caught; bailing out\n"  1>&2; f_cleanup_and_die' HUP
trap 'printf "$PROG (warn): INT signal caught; bailing out\n"  1>&2; f_cleanup_and_die' INT
trap 'printf "$PROG (warn): QUIT signal caught; bailing out\n" 1>&2; f_cleanup_and_die' QUIT
trap 'printf "$PROG (warn): TERM signal caught; bailing out\n" 1>&2; f_cleanup_and_die' TERM

trap 'f_cleanup' EXIT


f_print_help () {

    "${CAT_PROG}" <<EOF
usage: $PROG [OPTION...] [--] [ATQ_OPTION...]
       $PROG {-h|--help}
       $PROG {-v|--version}
Sort and pretty-print the output of 'at -l' (a.k.a. atq(1))

  -h, --help      Print this help message on stdout
  -V, --version   Print the version of the program on stdout

  -v, --verbose   Tell what is being done.
                    One -v opt produces info-level messages.
                    Two -v opts enables debug-level messages, too.
                    Three or more -v options turns on tracing (set -x)

      --          Signals the end of options and disables further options processing. All
                    remaining arguments will be passed through to atq(1)

Any provided options that are not recognized by $PROG (that is, any
options that are not in the above list) will be passed through to atq(1).

Report bugs to ${MAINTAINER}
EOF
}

f_print_version () {
    "${CAT_PROG}" <<EOF
${PROG} ${gl_const_release}
Copyright (C) ${COPYRIGHT_DATES} Alan D. Salewski
License GPLv2+: GNU GPL version 2 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Alan D. Salewski.
EOF
}


# main of program starts here

# Per our documented behavior, and command line options not recognized by
# atat(1) will be passed through to atq(1). We'll collect all such options in
# this array; the same goes for any command line options/arguments that follow
# the magic '--' pseudo option.
#
declare -a OPTS_TO_PASS_THROUGH_TO_ATQ=()

pos_last_plus_one=$(( $# + 1 ))

# Each value is one or zero, which indicates whether or not the option is
# expected to have an argument.
#
declare -A longopt_spec=(
    ['help']=0                    # -h, --help
    ['version']=0                 # -V, --version

    ['verbose']=0                 # -v, --verbose
)

# internal sanity check
for one_key in "${!longopt_spec[@]}"; do
    one_val=${longopt_spec[${one_key}]}
    if [[ $one_val =~ ^[01]$ ]]; then :; else
        printf "${PROG} (BUG) [line $LINENO]: value (%s) for longopt key '%s' must be either 0 or 1; bailing out\n" \
               "${one_val}" "${one_key}" 1>&2
        exit 1
    fi
done

if test $# -gt 0; then

    # Using getopts in "silent mode". Note that adding '-' to the optstring
    # allows us to process GNU-style long-form options; that option is
    # specified to take an argument to cause getopts to place whatever follows
    # the second '-' character into OPTARG.
    #
    # Note that getopts will automatically stop processsing options upon
    # encountering '--', but we still need to deal with the pathological form
    # --=BLAH (no option name, just a value using the equals-sign syntax).
    #
    while builtin getopts ':-:hVv' opt
    do
        : $PROG \(trace: $LINENO\):    opt is: $opt
        : $PROG \(trace: $LINENO\): OPTARG is: $OPTARG

        # cosmetic: for log/error messages
        t_pfx='-'  # assume short-form option

        if test "${opt}" = '-'; then

            # Intercepting processing of long-form option. This conditional
            # block will set up the 'opt', 'OPTARG', and 'OPTIND' variables
            # for the code that follows, just as if getopts had the capability
            # to process long-form options.

            t_pfx='--'

            # OPTARG here is one of:
            #
            #     =BLAH    (which means user specified '--=BLAH')
            # or:
            #     foo
            # or:
            #     foo=FOOVAL

            if [[ ${OPTARG} =~ .*=.* ]]; then

                : $PROG \(trace: $LINENO\): OPTARG is name=value style

                # Keep everything up to the first '=' sign. Note that if the
                # option was specified as: --foo=FOOVAL, then $opt here will
                # be 'foo' (no hyphen chars).
                opt=${OPTARG/=*/}
                : $PROG \(trace: $LINENO\): opt is: $opt

                : $PROG \(trace: $LINENO\): a long option name must be at least two characters in length
                if test ${#opt} -le 1; then
                    printf "${PROG} (error): invalid long option '%s%s'; bailing out\n" "${t_pfx}" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                t_exists=false
                for one_key in "${!longopt_spec[@]}"; do
                    if test "${opt}" = "${one_key}"; then
                        t_exists=true
                        break
                    fi
                done

                if $t_exists; then :; else
                    # # Unrecognized option; note that we need to restore the
                    # # leading '-' chars that getopts has sliced off.
                    # #
                    # printf "${PROG} (error): unrecognized long option '%s%s'; bailing out\n" "${t_pfx}" "${opt}" 1>&2
                    # f_print_help 1>&2
                    # exit 1

                    # Unrecognized option. We'll queue it up to pass through
                    # to atq(1). Note that we need to restore the '--' prefix
                    # to the option.
                    #
                    # Note that we are passing OPTARG through; if the option
                    # had an argument, both the option and its parameter are
                    # in OPTARG, as we know it is a full 'name=value' here.
                    #
                    OPTS_TO_PASS_THROUGH_TO_ATQ+=( "${t_pfx}${opt}" )
                    (( ++OPTIND ))
                    continue
                fi

                # Since we know the option was specified in --foo=BAR form,
                # the option was specified erroneously unless the option's
                # long-form spec indicates that it can accept an argument.
                #
                if test ${longopt_spec[${opt}]} -ne 1; then
                    printf "${PROG} (error): option '%s%s' does not take an argument; bailing out\n" "${t_pfx}" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                OPTARG=${OPTARG#*=}  # keep everything after the first '=' sign
                : $PROG \(trace: $LINENO\): OPTARG is: $OPTARG

            else
                : $PROG \(trace: $LINENO\): OPTARG is name-only style

                opt="$OPTARG"
                : $PROG \(trace: $LINENO\): opt is: $opt

                if test -z "${opt}"; then

                    # This should be a "can't happen" scenario; since bash's
                    # 'getopts' implementation should directly handle the
                    # magic '--' token, we should never fall through here.

                    printf "${PROG} (BUG) [line $LINENO]: received empty OPTARG, which means getopts did not handle the stand-alone '--' token; bailing out\n" 1>&2
                    exit 1
                fi

                : $PROG \(trace: $LINENO\): a non-empty long option name must be at least two characters in length
                if test ${#opt} -lt 2; then
                    printf "${PROG} (error): invalid long option '%s%s'; bailing out\n" "${t_pfx}" "${opt}" 1>&2
                    f_print_help 1>&2
                    exit 1
                fi

                t_exists=false
                for one_key in "${!longopt_spec[@]}"; do
                    if test "${opt}" = "${one_key}"; then
                        t_exists=true
                        break
                    fi
                done

                if $t_exists; then :; else

                    # # Unrecognized option; note that we need to restore the
                    # # leading '-' chars that getopts has sliced off.
                    # #
                    # printf "${PROG} (error): unrecognized long option '%s%s'; bailing out\n" "${t_pfx}" "${opt}" 1>&2
                    # f_print_help 1>&2
                    # exit 1

                    # Unrecognized option. We'll queue it up to pass through
                    # to atq(1). Note that we need to restore the '--' prefix
                    # to the option.
                    OPTS_TO_PASS_THROUGH_TO_ATQ+=( "${t_pfx}${opt}" )

                    # If there is another command line argument and it is a
                    # parameter to the option we are passing through (as
                    # determined by its lack of a leading '-' char), then we
                    # will need to pass it through, as well.
                    # If bumping OPTIND would put us more than one beyond the "last pos
                    # plus one", then there is no argument provided at position OPTIND for
                    # us to consume.
                    #
                    if (( $(( $OPTIND + 1 )) > pos_last_plus_one )); then
                        (( ++OPTIND ))
                        continue
                    else
                        t_cand_optarg=${@:${OPTIND}:1}
                        if [[ ${t_cand_optarg} =~ ^[-].* ]]; then
                            # Looks like another command line option (i.e., is
                            # not an argument to our pass-through option).
                            (( ++OPTIND ))  # pos of pass-through opt
                            unset t_cand_optarg
                            continue
                        else
                            # Looks like a parameter to our pass-through option
                            OPTS_TO_PASS_THROUGH_TO_ATQ+=( "${t_cand_optarg}" )
                            (( ++OPTIND ))  # pos of pass-through opt
                            (( ++OPTIND ))  # pos of pass-through opt's argument
                            unset t_cand_optarg
                            continue
                        fi
                    fi

                fi

                # We know the option was specified in one of the following forms:
                #
                #     --foo
                # or:
                #     --foo FOOVAL
                #
                # The option's long-form spec will tell us whether or not an argument is
                # expected for the option.
                #
                if test ${longopt_spec[${opt}]} -eq 1; then

                    # If bumping OPTIND would put us more than one beyond the "last pos
                    # plus one", then there is no argument provided at position OPTIND for
                    # us to consume.
                    #
                    if (( $(( $OPTIND + 1 )) > pos_last_plus_one )); then

                        printf "${PROG} (error): missing argument for option '%s%s'\n" "${t_pfx}" "${opt}" 1>&2
                        f_print_help 1>&2
                        exit 1
                    fi

                    OPTARG=${@:${OPTIND}:1}
                    (( ++OPTIND ))
                    : $PROG \(trace: $LINENO\): manually incremented OPTIND to: $OPTIND
                fi
            fi
        fi

        # Normal getopts style processing happens beneath here, with the
        # slight twist that 'opt' may contain a long-form option name.

        case $opt in

            'help' | 'h' )
                # print help message
                f_print_help
                exit 0
                ;;

            'version' | 'V' )
                # print program version info
                f_print_version
                exit 0
                ;;


            'verbose' | 'v' )
                # Accumulating 'verbose' opt. A single -v opt simply turns
                # BE_VERBOSE on (enables (additional) info-level
                # messages). Two -v opts turns on $DEBUGGING, which
                # additionally enables debug-level messages. Three or more
                # '-v' opts turns $TRACING on. Note that if you intend to turn
                # tracing on, you'll probably want your -v opts to be the
                # first opts on the command line (so they take effect
                # earlier).
                if $BE_VERBOSE; then

                    if $DEBUGGING; then

                        # We've seen at least two -v opt before, so now we're
                        # turning tracing on.

                        if $TRACING; then
                            : $PROG \(trace: $LINENO\): tracing already enabled
                        else
                            # See comments at the decl spot for $TRACING
                            # pertaining to why we maintain an "application"
                            # $TRACING flag separate from bash's built-in
                            # 'xtrace' (set -x) shell option.

                            # Enable tracking before setting our app-level
                            # $TRACING flag so that setting it is the first
                            # thing that appears in the trace.
                            set -x
                            TRACING=true
                        fi
                    else
                        # Second -v opt we're seeing
                        DEBUGGING=true
                        # Just to give a warm and fuzzy...
                        printf "${PROG} (debug): debug-level output enabled\n" 1>&2
                    fi
                else
                    # First -v opt we're seeing
                    BE_VERBOSE=true
                fi
                ;;


            ':')  # getopts put : in opt
                  printf "${PROG} (error): missing argument for option '%s%s'\n" "$t_pfx" "$OPTARG" 1>&2
                  f_print_help 1>&2
                  exit 1
                  ;;

            '?')  # getopts put ? in opt  (means "unrecognized option")
                  # printf "${PROG} (error): unrecognized option '%s%s'; bailing out\n" "$t_pfx" "$OPTARG" 1>&2
                  # f_print_help 1>&2
                  # exit 1;

                  # Unrecognized option. We'll queue it up to pass through to
                  # atq(1). Note that we need to restore the prefix ('-' or
                  # '--') to the option.
                  OPTS_TO_PASS_THROUGH_TO_ATQ+=( "${t_pfx}${OPTARG}" )

                  # If there is another command line argument and it is a
                  # parameter to the option we are passing through (as
                  # determined by its lack of a leading '-' char), then we
                  # will need to pass it through, as well.  If bumping OPTIND
                  # would put us more than one beyond the "last pos plus one",
                  # then there is no argument provided at position OPTIND for
                  # us to consume.
                  #
                  if (( $(( $OPTIND + 1 )) > pos_last_plus_one )); then
                      : No additional parameter possible; nothing to do
                  else
                      t_cand_optarg=${@:${OPTIND}:1}
                      if [[ ${t_cand_optarg} =~ ^[-].* ]]; then
                          :
                          # Looks like another command line option (i.e., is
                          # not an argument to our pass-through
                          # option). Nothing to do.
                      else
                          # Looks like a parameter to our pass-through option
                          OPTS_TO_PASS_THROUGH_TO_ATQ+=( "${t_cand_optarg}" )
                          (( ++OPTIND ))  # hand-crank to hop it on the next getopts loop
                      fi
                      unset t_cand_optarg
                    fi
                  ;;

            * )   printf "${PROG} (BUG) [line $LINENO]: unhandled option case; opt: '$opt',  OPTARG: '$OPTARG'\n" 1>&2
                  exit 1
                  ;;
        esac
    done
fi

# shift off all arguments already handled
let ii=1;  # shell OPTIND index starts at 1
while (( ii < ${OPTIND} )); do
    shift
    (( ++ii ))
    : $PROG \(trace: $LINENO\): ii is now: $ii
done

# Drain any remaining command line parameters not processed by getopts; we'll
# pass all of them through to atq(1).
while test $# -gt 0; do
    : $PROG \(trace: $LINENO\): collecting command line parameter to pass through to atq: $1
    OPTS_TO_PASS_THROUGH_TO_ATQ+=( "$1" )
    shift
done


# By default the output of 'at -l' (a.k.a. atq(1)) is sorted by neither the
# 'at' job number nor the date/time at which the job will be executed:
#
#     $ at -l | head
#     39      Wed Jun 24 03:00:00 2020 a ads
#     37      Sun Dec 20 03:00:00 2020 a ads
#     49      Thu Sep 24 03:00:00 2020 a ads
#     46      Sun Jul 25 03:00:00 2021 a ads
#     36      Thu Jun 24 03:00:00 2021 a ads
#     42      Wed Aug 25 03:00:00 2021 a ads
#     38      Tue May 25 03:00:00 2021 a ads
#     50      Mon Jan 25 03:00:00 2021 a ads
#
#
# We'll consume the 'at -l' format and sort it by date/time, and then by job
# number. We'll leverage the date(1) command to reformat the (potentially
# localized?) POSIX date/time info into something closer to an RFC 3339
# ("closer" because we don't emit the 'time-offset' required by section 5.6 of
# RFC 3339). The reformatted date/time field sorts naturally in ascending
# order (a fact we also leverage), but is also more easily used by downstream
# tools that may wish to sort the output in different ways (e.g., by queue,
# then by user, then by date).
#
# XXX: Future versions of the program might want to provde a number of
#      '--by-FOO' command line options (where FOO is one of 'datetime',
#      'job-number', 'queue-name', or 'user-name') to allow the user to alter
#      our baked-in sort order.
#
#     $ at -l | xargs -r -L 1 sh -c 'echo $1 $(date --date "$2, $4 $3 $6 $5" "+%F %T") $7 $8' atat
#     39 2020-06-24 03:00:00 a ads
#     37 2020-12-20 03:00:00 a ads
#     49 2020-09-24 03:00:00 a ads
#     46 2021-07-25 03:00:00 a ads
#     36 2021-06-24 03:00:00 a ads
#     42 2021-08-25 03:00:00 a ads
#     38 2021-05-25 03:00:00 a ads
#     50 2021-01-25 03:00:00 a ads
#     45 2020-10-25 03:00:00 a ads
#     44 2021-04-24 03:00:00 a ads
#     48 2020-04-24 03:00:00 a ads
#     47 2020-05-25 03:00:00 a ads
#     52 2021-03-25 03:00:00 a ads
#     43 2020-11-24 03:00:00 a ads
#     41 2020-07-25 03:00:00 a ads
#     40 2021-02-22 03:00:00 a ads
#     51 2020-08-25 03:00:00 a ads

# Anybody trying to debug this program is going to want to see how atq(1) (or
# 'at -l') gets invoked. So as a special case, we'll enable tracing here at
# the very end if debugging output is enabled but tracing is not.
#
if $DEBUGGING; then
    if $TRACING; then :; else
        set -x
    fi
fi

# Note that we pass the ${PROG} name to the shell merely so it will be used to
# set $0. That allows us to avoid needing to "subtract one" with our field
# numbers.
"${AT_PROG}" -l "${OPTS_TO_PASS_THROUGH_TO_ATQ[@]}" \
| "${XARGS_PROG}" -r -L 1 "${SH_PROG}" -c 'echo $1 $(date --date "$2, $4 $3 $6 $5" "+%F %T") $7 $8' atat

exit 0


#
# ----------------------------------------------------------------------------
# Documentation
#
# The docs are in Perl's POD format, so you can run either the 'perldoc' or
# 'pod2man' programs on this file to produce a man page.
#
# To generate a man page for distribution (in a tarball or RPM, for instance),
# you'll probably want to run pod2man something like this:
#
#     $ pod2man /path/to/this/file \
#               --center='atat' \
#               --release='atat-0.1.0' \
#               --section='1' \
#               > /outputdir/atat.1
#
# To inspect the page formatting, etc., you can pipe the above 'pod2man'
# command to:
#
#     'man -l -'
#
# instead of redirecting the output to a file.
#
# ----------------------------------------------------------------------------

=pod

=head1 NAME

  atat - Sort and pretty-print the output of 'at -l' (a.k.a. atq(1))


=head1 SYNOPSIS

  atat {-h|--help}
  atat {-v|--version}

  atat [OPTION...] [--] [ATQ_OPTION...]


=head1 DESCRIPTION

Answers the question: "When are my L<at(1)> jobs gonna run at?"

The C<atat> program pretty-prints the output of C<at -l> to show L<at(1)> jobs
in the order in which they will occur ("execution order"), and with the date
and time fields formatted in a way that is more easily (than the default
output) consumed by downstream tools in a *nix pipeline.


=head2 Motivation

The default output of C<at -l> is prescribed by the POSIX specs. Specifically,
it states:

=over 4

In the POSIX locale, the following shall be written to the standard output for
each job when jobs are listed in response to the -l option:

    "%s\t%s\n", at_job_id, <date>

where date shall be equivalent in format to the output of:


    date +"%a %b %e %T %Y"

The date and time written shall be adjusted so that they appear in the
timezone of the user (as determined by the TZ variable).

=back

In practice, the output of C<at -l> looks something like this:

    $ at -l
    39      Wed Jun 24 03:00:00 2020 a ads
    37      Sun Dec 20 03:00:00 2020 a ads
    49      Thu Sep 24 03:00:00 2020 a ads
    46      Sun Jul 25 03:00:00 2021 a ads
    36      Thu Jun 24 03:00:00 2021 a ads
    42      Wed Aug 25 03:00:00 2021 a ads
    38      Tue May 25 03:00:00 2021 a ads
    50      Mon Jan 25 03:00:00 2021 a ads
    45      Sun Oct 25 03:00:00 2020 a ads
    44      Sat Apr 24 03:00:00 2021 a ads
    48      Fri Apr 24 03:00:00 2020 a ads
    47      Mon May 25 03:00:00 2020 a ads
    52      Thu Mar 25 03:00:00 2021 a ads
    43      Tue Nov 24 03:00:00 2020 a ads
    41      Sat Jul 25 03:00:00 2020 a ads
    40      Mon Feb 22 03:00:00 2021 a ads
    51      Tue Aug 25 03:00:00 2020 a ads

Notice that the jobs are neither presented in execution order nor even by job
number.

The default output of C<atat> (shown below) sorts the L<at(1)> jobs by the
order in which they will be executed, and secondarily by job number:

    $ atat
    48 2020-04-24 03:00:00 a ads
    47 2020-05-25 03:00:00 a ads
    39 2020-06-24 03:00:00 a ads
    41 2020-07-25 03:00:00 a ads
    51 2020-08-25 03:00:00 a ads
    49 2020-09-24 03:00:00 a ads
    45 2020-10-25 03:00:00 a ads
    43 2020-11-24 03:00:00 a ads
    37 2020-12-20 03:00:00 a ads
    50 2021-01-25 03:00:00 a ads
    40 2021-02-22 03:00:00 a ads
    52 2021-03-25 03:00:00 a ads
    44 2021-04-24 03:00:00 a ads
    38 2021-05-25 03:00:00 a ads
    36 2021-06-24 03:00:00 a ads
    46 2021-07-25 03:00:00 a ads
    42 2021-08-25 03:00:00 a ads

Note that (unlike the default output of L<at(1)>) the C<atat> output can be
easily sorted by other criteria, as well, by downstream tools. For example, to
sort by queue name, then by user, then by job sequence, then by job number one
could do this:

    $ atat | sort -k4,4 -k5,5 -k2,2 -k3,3 -k1,1


=head1 OPTIONS

Below are the command line options currently accepted by C<atat>.

Any options provided on the command line that are not recognized directly by
C<atat> will be passed through to the L<atq(1)> subprocess. You can use the
C<--> pseudo-option to force the end of options processing for C<atat>, as
described below.


=over 4

=item --help

Print help usage message


=item -V, --version

Print the version of the program to stdout and then exit.


=item -v, --verbose

Turn on verbose mode. Causes program to emit messages on C<stderr> indicating
what it is doing. The option may be specified multiple times to increase
further the level of verbosity. One C<-v> option enables info-level output;
two such opts enable debug-level output; three or more enable trace-level
output.

Accumulating "verbose" option; tell what is being done. May be specified more
than once; each additional instance of the option enables an additional amount
of ouput on stderr thus:

=over 4

=item * One C<-v> opt produces info-level messages.

=item * Two C<-v> opts enables debug-level messages, too.

=item * Three or more C<-v> options turns on tracing (set -x)

=back


=item --

Signals the end of options and disables further options processing. Any
remaining command line arguments will be passed through to atq(1).

You can use the C<--> pseudo-option to force the end of options processing for
C<atat>; all options after the C<--> on the command line will be passed
through to L<atq(1)> even if they happen to match one of the C<atat> option
names.

For maximum portability, it is recommended to always use the C<-->
pseudo-option to make explict the intent that certain options should be passed
through to L<atq(1)>, especially when C<atat> is used in scripts.

=back


=head1 EXIT STATUS

Exits with zero on success, non-zero on error.


=head1 STANDARDS

=over 4

=item * The Single Unix Specification version 4, 2018 Edition ("SUSv4")

The SUSv4 standard's core volumes are simultaneously the IEEE Portable
Operating System Interface (POSIX) standard and the ISO/IEC 9945 standard.

The Shell and Utilities volume of POSIX.1-2017 describes the commands and
utilities offered to application programs by POSIX-conformant systems.

The L<at(1)> command, including the C<at -l> invocation described above, is
prescribed in the "Shell and Utilities" volume of the POSIX standard.

The SUSv4 standard can be obtained from The Open Group here (requires login):

=over 4

L<https://www.opengroup.org/membership/forums/platform/unix>

=back

=back


=head1 BUGS

Probably tons.

If you find any, please report them as described in the C<BUGS> file.


=head1 SEE ALSO

=over 4

=item * L<at(1)>

=item * L<atq(1)>

=back


=head1 AUTHOR

=over 4

=item Alan D. Salewski  <salewski@att.net>

=back

=cut

# Copyright symbol gets munged by pod2man(1), so we'll fall back on using '(C)'
# Copyright © 2020 Alan D. Salewski

=pod

=head1 COPYLEFT

Copyright (C) 2020 Alan D. Salewski <salewski@att.net>

License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

=cut


# Local Variables:
#     mode: sh
#     eval: (sh-set-shell "bash" t nil)
# End:
